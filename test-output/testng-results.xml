<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="33" passed="27" failed="5" skipped="0">
  <reporter-output>
    <line>
      <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_51.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_51.png' height='100' width='100'/> </a>]]>
    </line>
    <line>
      <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_53.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_53.png' height='100' width='100'/> </a>]]>
    </line>
    <line>
      <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_55.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_55.png' height='100' width='100'/> </a>]]>
    </line>
    <line>
      <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyADDATMScreenOpened_02_06_2023_01_18_17.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyADDATMScreenOpened_02_06_2023_01_18_17.png' height='100' width='100'/> </a>]]>
    </line>
    <line>
      <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyThaATMExistInList_02_06_2023_01_18_47.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyThaATMExistInList_02_06_2023_01_18_47.png' height='100' width='100'/> </a>]]>
    </line>
  </reporter-output>
  <suite started-at="2023-06-02T08:17:45Z" name="ReconStream" finished-at="2023-06-02T08:18:47Z" duration-ms="62291">
    <groups>
    </groups>
    <test started-at="2023-06-02T08:17:45Z" name=" Login" finished-at="2023-06-02T08:17:58Z" duration-ms="13480">
      <class name="TimeStreamGroup.Reconstream.Login">
        <test-method signature="ValidateThePageTitle()[pri:1, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:45Z" name="ValidateThePageTitle" finished-at="2023-06-02T08:17:45Z" duration-ms="34" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateThePageTitle -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:45Z" name="testIT" finished-at="2023-06-02T08:17:45Z" duration-ms="459" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateThePageTitle status=SUCCESS method=Login.ValidateThePageTitle()[pri:1, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateThatSignInHeadingPersistOnTheLoginPage()[pri:2, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:45Z" name="ValidateThatSignInHeadingPersistOnTheLoginPage" finished-at="2023-06-02T08:17:45Z" duration-ms="69" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateThatSignInHeadingPersistOnTheLoginPage -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="65" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateThatSignInHeadingPersistOnTheLoginPage status=SUCCESS method=Login.ValidateThatSignInHeadingPersistOnTheLoginPage()[pri:2, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateThatLoginTextPersistOnTheLoginPage()[pri:3, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidateThatLoginTextPersistOnTheLoginPage" finished-at="2023-06-02T08:17:46Z" duration-ms="22" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateThatLoginTextPersistOnTheLoginPage -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="69" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateThatLoginTextPersistOnTheLoginPage status=SUCCESS method=Login.ValidateThatLoginTextPersistOnTheLoginPage()[pri:3, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateUserNameFieldPersistOnTheLoginPage()[pri:4, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidateUserNameFieldPersistOnTheLoginPage" finished-at="2023-06-02T08:17:46Z" duration-ms="64" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateUserNameFieldPersistOnTheLoginPage -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="65" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateUserNameFieldPersistOnTheLoginPage status=SUCCESS method=Login.ValidateUserNameFieldPersistOnTheLoginPage()[pri:4, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidatePasswordFieldPersistOnTheLoginPage()[pri:5, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidatePasswordFieldPersistOnTheLoginPage" finished-at="2023-06-02T08:17:46Z" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidatePasswordFieldPersistOnTheLoginPage -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="66" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidatePasswordFieldPersistOnTheLoginPage status=SUCCESS method=Login.ValidatePasswordFieldPersistOnTheLoginPage()[pri:5, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateForGotPasswordPersistOnTheLoginPage()[pri:6, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidateForGotPasswordPersistOnTheLoginPage" finished-at="2023-06-02T08:17:46Z" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateForGotPasswordPersistOnTheLoginPage -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="52" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateForGotPasswordPersistOnTheLoginPage status=SUCCESS method=Login.ValidateForGotPasswordPersistOnTheLoginPage()[pri:6, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateSigInButtonPersistOnTheLoginPage()[pri:7, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidateSigInButtonPersistOnTheLoginPage" finished-at="2023-06-02T08:17:46Z" duration-ms="43" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateSigInButtonPersistOnTheLoginPage -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="53" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateSigInButtonPersistOnTheLoginPage status=SUCCESS method=Login.ValidateSigInButtonPersistOnTheLoginPage()[pri:7, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateUserNameFieldIsEnabled()[pri:8, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidateUserNameFieldIsEnabled" finished-at="2023-06-02T08:17:46Z" duration-ms="25" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateUserNameFieldIsEnabled -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="66" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateUserNameFieldIsEnabled status=SUCCESS method=Login.ValidateUserNameFieldIsEnabled()[pri:8, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidatePasswordFieldEnabled()[pri:9, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidatePasswordFieldEnabled" finished-at="2023-06-02T08:17:46Z" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidatePasswordFieldEnabled -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="testIT" finished-at="2023-06-02T08:17:46Z" duration-ms="52" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidatePasswordFieldEnabled status=SUCCESS method=Login.ValidatePasswordFieldEnabled()[pri:9, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateLoginWithEmptyStrtings(java.lang.String, java.lang.String)[pri:10, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:46Z" name="ValidateLoginWithEmptyStrtings" data-provider="EmptyString" finished-at="2023-06-02T08:17:47Z" duration-ms="430" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateLoginWithEmptyStrtings -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:47Z" name="testIT" finished-at="2023-06-02T08:17:47Z" duration-ms="47" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateLoginWithEmptyStrtings status=SUCCESS method=Login.ValidateLoginWithEmptyStrtings(java.lang.String, java.lang.String)[pri:10, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateLoginWithEmptyUserName(java.lang.String, java.lang.String)[pri:11, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:47Z" name="ValidateLoginWithEmptyUserName" data-provider="EmptyPasswordField" finished-at="2023-06-02T08:17:48Z" duration-ms="1455" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ch.mudassar.munir@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateLoginWithEmptyUserName -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:48Z" name="testIT" finished-at="2023-06-02T08:17:48Z" duration-ms="45" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateLoginWithEmptyUserName status=SUCCESS method=Login.ValidateLoginWithEmptyUserName(java.lang.String, java.lang.String)[pri:11, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateLoginWithEmpPassword(java.lang.String, java.lang.String)[pri:12, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:48Z" name="ValidateLoginWithEmpPassword" data-provider="EmptyUserNameField" finished-at="2023-06-02T08:17:49Z" duration-ms="381" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateLoginWithEmpPassword -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:49Z" name="testIT" finished-at="2023-06-02T08:17:49Z" duration-ms="39" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateLoginWithEmpPassword status=SUCCESS method=Login.ValidateLoginWithEmpPassword(java.lang.String, java.lang.String)[pri:12, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateLoginWithWrongCombination(java.lang.String, java.lang.String)[pri:13, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:49Z" name="ValidateLoginWithWrongCombination" data-provider="Authentication" finished-at="2023-06-02T08:17:51Z" duration-ms="2465" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test@mailinator.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test]]>
              </value>
            </param>
          </params>
          <exception class="junit.framework.ComparisonFailure">
            <message>
              <![CDATA[expected:<Invalid [Username or P]assword> but was:<Invalid [username or p]assword>]]>
            </message>
            <full-stacktrace>
              <![CDATA[junit.framework.ComparisonFailure: expected:<Invalid [Username or P]assword> but was:<Invalid [username or p]assword>
at junit.framework.Assert.assertEquals(Assert.java:100)
at junit.framework.Assert.assertEquals(Assert.java:107)
at TimeStreamGroup.Reconstream.Login.ValidateLoginWithWrongCombination(Login.java:222)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.ComparisonFailure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateLoginWithWrongCombination -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:51Z" name="testIT" finished-at="2023-06-02T08:17:51Z" duration-ms="331" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateLoginWithWrongCombination status=FAILURE method=Login.ValidateLoginWithWrongCombination(java.lang.String, java.lang.String)[pri:13, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_51.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_51.png' height='100' width='100'/> </a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateLoginWithWrongCombination(java.lang.String, java.lang.String)[pri:13, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:51Z" name="ValidateLoginWithWrongCombination" data-provider="Authentication" finished-at="2023-06-02T08:17:53Z" duration-ms="1563" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[ch.mudassar.munir@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test]]>
              </value>
            </param>
          </params>
          <exception class="junit.framework.ComparisonFailure">
            <message>
              <![CDATA[expected:<Invalid [Username or P]assword> but was:<Invalid [username or p]assword>]]>
            </message>
            <full-stacktrace>
              <![CDATA[junit.framework.ComparisonFailure: expected:<Invalid [Username or P]assword> but was:<Invalid [username or p]assword>
at junit.framework.Assert.assertEquals(Assert.java:100)
at junit.framework.Assert.assertEquals(Assert.java:107)
at TimeStreamGroup.Reconstream.Login.ValidateLoginWithWrongCombination(Login.java:222)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.ComparisonFailure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateLoginWithWrongCombination -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:53Z" name="testIT" finished-at="2023-06-02T08:17:53Z" duration-ms="290" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateLoginWithWrongCombination status=FAILURE method=Login.ValidateLoginWithWrongCombination(java.lang.String, java.lang.String)[pri:13, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_53.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_53.png' height='100' width='100'/> </a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateLoginWithWrongCombination(java.lang.String, java.lang.String)[pri:13, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:53Z" name="ValidateLoginWithWrongCombination" data-provider="Authentication" finished-at="2023-06-02T08:17:55Z" duration-ms="1555" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test@mailinator.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Password1!]]>
              </value>
            </param>
          </params>
          <exception class="junit.framework.ComparisonFailure">
            <message>
              <![CDATA[expected:<Invalid [Username or P]assword> but was:<Invalid [username or p]assword>]]>
            </message>
            <full-stacktrace>
              <![CDATA[junit.framework.ComparisonFailure: expected:<Invalid [Username or P]assword> but was:<Invalid [username or p]assword>
at junit.framework.Assert.assertEquals(Assert.java:100)
at junit.framework.Assert.assertEquals(Assert.java:107)
at TimeStreamGroup.Reconstream.Login.ValidateLoginWithWrongCombination(Login.java:222)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.ComparisonFailure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateLoginWithWrongCombination -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:55Z" name="testIT" finished-at="2023-06-02T08:17:55Z" duration-ms="264" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateLoginWithWrongCombination status=FAILURE method=Login.ValidateLoginWithWrongCombination(java.lang.String, java.lang.String)[pri:13, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_55.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\ValidateLoginWithWrongCombination_02_06_2023_01_17_55.png' height='100' width='100'/> </a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="ValidateLoginWithCorrectUserNameAndPassword(java.lang.String, java.lang.String)[pri:14, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:55Z" name="ValidateLoginWithCorrectUserNameAndPassword" finished-at="2023-06-02T08:17:58Z" duration-ms="2941" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ch.mudassar.munir@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Password1!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ValidateLoginWithCorrectUserNameAndPassword -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Login@a2431d0]" started-at="2023-06-02T08:17:58Z" name="testIT" finished-at="2023-06-02T08:17:58Z" duration-ms="272" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ValidateLoginWithCorrectUserNameAndPassword status=SUCCESS method=Login.ValidateLoginWithCorrectUserNameAndPassword(java.lang.String, java.lang.String)[pri:14, instance:TimeStreamGroup.Reconstream.Login@a2431d0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
      </class> <!-- TimeStreamGroup.Reconstream.Login -->
    </test> <!--  Login -->
    <test started-at="2023-06-02T08:17:59Z" name="ATM Management" finished-at="2023-06-02T08:18:47Z" duration-ms="48664">
      <class name="TimeStreamGroup.Reconstream.Administration_ATM">
        <test-method is-config="true" signature="LaunchApplication()[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:17:28Z" name="LaunchApplication" finished-at="2023-06-02T08:17:45Z" duration-ms="16497" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LaunchApplication -->
        <test-method signature="VerifyThatAdministrationisVisible()[pri:1, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:17:59Z" name="VerifyThatAdministrationisVisible" finished-at="2023-06-02T08:18:03Z" duration-ms="4514" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatAdministrationisVisible -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:03Z" name="testIT" finished-at="2023-06-02T08:18:03Z" duration-ms="65" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatAdministrationisVisible status=SUCCESS method=Administration_ATM.VerifyThatAdministrationisVisible()[pri:1, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatATMManagmentisVisible()[pri:2, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:03Z" name="VerifyThatATMManagmentisVisible" finished-at="2023-06-02T08:18:08Z" duration-ms="4430" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatATMManagmentisVisible -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:08Z" name="testIT" finished-at="2023-06-02T08:18:08Z" duration-ms="59" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatATMManagmentisVisible status=SUCCESS method=Administration_ATM.VerifyThatATMManagmentisVisible()[pri:2, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatALLATMListIsShowing()[pri:3, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:08Z" name="VerifyThatALLATMListIsShowing" finished-at="2023-06-02T08:18:14Z" duration-ms="6483" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatALLATMListIsShowing -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:14Z" name="testIT" finished-at="2023-06-02T08:18:14Z" duration-ms="42" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatALLATMListIsShowing status=SUCCESS method=Administration_ATM.VerifyThatALLATMListIsShowing()[pri:3, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyADDATMScreenOpened()[pri:4, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:14Z" name="VerifyADDATMScreenOpened" finished-at="2023-06-02T08:18:17Z" duration-ms="2613" status="FAIL">
          <exception class="junit.framework.ComparisonFailure">
            <message>
              <![CDATA[expected:<ATM Records[1]> but was:<ATM Records[]>]]>
            </message>
            <full-stacktrace>
              <![CDATA[junit.framework.ComparisonFailure: expected:<ATM Records[1]> but was:<ATM Records[]>
at junit.framework.Assert.assertEquals(Assert.java:100)
at junit.framework.Assert.assertEquals(Assert.java:107)
at TimeStreamGroup.Reconstream.Administration_ATM.VerifyADDATMScreenOpened(Administration_ATM.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- junit.framework.ComparisonFailure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyADDATMScreenOpened -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:17Z" name="testIT" finished-at="2023-06-02T08:18:17Z" duration-ms="185" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyADDATMScreenOpened status=FAILURE method=Administration_ATM.VerifyADDATMScreenOpened()[pri:4, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyADDATMScreenOpened_02_06_2023_01_18_17.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyADDATMScreenOpened_02_06_2023_01_18_17.png' height='100' width='100'/> </a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatterminalIDIsDisplayed()[pri:5, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:17Z" name="VerifyThatterminalIDIsDisplayed" finished-at="2023-06-02T08:18:19Z" duration-ms="2350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatterminalIDIsDisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:19Z" name="testIT" finished-at="2023-06-02T08:18:19Z" duration-ms="64" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatterminalIDIsDisplayed status=SUCCESS method=Administration_ATM.VerifyThatterminalIDIsDisplayed()[pri:5, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyCITFieldIsDisplayed()[pri:6, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:19Z" name="VerifyCITFieldIsDisplayed" finished-at="2023-06-02T08:18:22Z" duration-ms="2343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyCITFieldIsDisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:22Z" name="testIT" finished-at="2023-06-02T08:18:22Z" duration-ms="31" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyCITFieldIsDisplayed status=SUCCESS method=Administration_ATM.VerifyCITFieldIsDisplayed()[pri:6, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyDeviceLocationIsDisplayed()[pri:7, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:22Z" name="VerifyDeviceLocationIsDisplayed" finished-at="2023-06-02T08:18:24Z" duration-ms="2409" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDeviceLocationIsDisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:24Z" name="testIT" finished-at="2023-06-02T08:18:24Z" duration-ms="34" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyDeviceLocationIsDisplayed status=SUCCESS method=Administration_ATM.VerifyDeviceLocationIsDisplayed()[pri:7, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyRegionDropDownIsDisplayed()[pri:8, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:24Z" name="VerifyRegionDropDownIsDisplayed" finished-at="2023-06-02T08:18:29Z" duration-ms="4622" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRegionDropDownIsDisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:29Z" name="testIT" finished-at="2023-06-02T08:18:29Z" duration-ms="41" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyRegionDropDownIsDisplayed status=SUCCESS method=Administration_ATM.VerifyRegionDropDownIsDisplayed()[pri:8, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatIpAddressFieldIsdisplayed()[pri:9, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:29Z" name="VerifyThatIpAddressFieldIsdisplayed" finished-at="2023-06-02T08:18:29Z" duration-ms="440" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatIpAddressFieldIsdisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:29Z" name="testIT" finished-at="2023-06-02T08:18:29Z" duration-ms="49" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatIpAddressFieldIsdisplayed status=SUCCESS method=Administration_ATM.VerifyThatIpAddressFieldIsdisplayed()[pri:9, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatDeviceNameFieldIsdisplayed()[pri:10, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:29Z" name="VerifyThatDeviceNameFieldIsdisplayed" finished-at="2023-06-02T08:18:30Z" duration-ms="380" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatDeviceNameFieldIsdisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:30Z" name="testIT" finished-at="2023-06-02T08:18:30Z" duration-ms="48" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatDeviceNameFieldIsdisplayed status=SUCCESS method=Administration_ATM.VerifyThatDeviceNameFieldIsdisplayed()[pri:10, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatLatitudeFieldIsDisplayed()[pri:11, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:30Z" name="VerifyThatLatitudeFieldIsDisplayed" finished-at="2023-06-02T08:18:30Z" duration-ms="230" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatLatitudeFieldIsDisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:30Z" name="testIT" finished-at="2023-06-02T08:18:30Z" duration-ms="42" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatLatitudeFieldIsDisplayed status=SUCCESS method=Administration_ATM.VerifyThatLatitudeFieldIsDisplayed()[pri:11, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatLongitudeFieldIsDisplayed()[pri:12, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:30Z" name="VerifyThatLongitudeFieldIsDisplayed" finished-at="2023-06-02T08:18:30Z" duration-ms="295" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatLongitudeFieldIsDisplayed -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:30Z" name="testIT" finished-at="2023-06-02T08:18:30Z" duration-ms="46" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatLongitudeFieldIsDisplayed status=SUCCESS method=Administration_ATM.VerifyThatLongitudeFieldIsDisplayed()[pri:12, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatUserSelectTheVendor()[pri:13, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:30Z" name="VerifyThatUserSelectTheVendor" finished-at="2023-06-02T08:18:31Z" duration-ms="610" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatUserSelectTheVendor -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:31Z" name="testIT" finished-at="2023-06-02T08:18:31Z" duration-ms="50" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatUserSelectTheVendor status=SUCCESS method=Administration_ATM.VerifyThatUserSelectTheVendor()[pri:13, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatActiveOptionisSelectedByDefault()[pri:14, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:31Z" name="VerifyThatActiveOptionisSelectedByDefault" finished-at="2023-06-02T08:18:33Z" duration-ms="2077" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatActiveOptionisSelectedByDefault -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:33Z" name="testIT" finished-at="2023-06-02T08:18:33Z" duration-ms="36" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatActiveOptionisSelectedByDefault status=SUCCESS method=Administration_ATM.VerifyThatActiveOptionisSelectedByDefault()[pri:14, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThatAfterAddingtheATMUserLanonOnTHeListingScreen()[pri:15, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:33Z" name="VerifyThatAfterAddingtheATMUserLanonOnTHeListingScreen" finished-at="2023-06-02T08:18:37Z" duration-ms="3735" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThatAfterAddingtheATMUserLanonOnTHeListingScreen -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:37Z" name="testIT" finished-at="2023-06-02T08:18:37Z" duration-ms="48" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThatAfterAddingtheATMUserLanonOnTHeListingScreen status=SUCCESS method=Administration_ATM.VerifyThatAfterAddingtheATMUserLanonOnTHeListingScreen()[pri:15, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIT -->
        <test-method signature="VerifyThaATMExistInList()[pri:16, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:37Z" name="VerifyThaATMExistInList" finished-at="2023-06-02T08:18:47Z" duration-ms="10051" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[The element with the reference 7f2c1074-4dd0-4919-b356-1344f0e7b4c8 is stale; either its node document is not the active document, or it is no longer connected to the DOM
For documentation on this error, please visit: http://seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.8.1', revision: '6e95a6684b', time: '2017-12-01T18:33:54.468Z'
System info: host: 'DESKTOP-ECUBPED', ip: '192.168.100.2', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '15.0.2'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 113.0.2, javascriptEnabled: true, moz:accessibilityChecks: false, moz:buildID: 20230522134052, moz:geckodriverVersion: 0.29.1, moz:headless: false, moz:platformVersion: 10.0, moz:processID: 13196, moz:profile: C:\Users\MRMUDA~1\AppData\L..., moz:shutdownTimeout: 60000, moz:useNonSpecCompliantPointerOrigin: false, moz:webdriverClick: true, moz:windowless: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: fca48f57-f409-4c43-b466-961d045b18f9
*** Element info: {Using=tag name, value=td}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: The element with the reference 7f2c1074-4dd0-4919-b356-1344f0e7b4c8 is stale; either its node document is not the active document, or it is no longer connected to the DOM
For documentation on this error, please visit: http://seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.8.1', revision: '6e95a6684b', time: '2017-12-01T18:33:54.468Z'
System info: host: 'DESKTOP-ECUBPED', ip: '192.168.100.2', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '15.0.2'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 113.0.2, javascriptEnabled: true, moz:accessibilityChecks: false, moz:buildID: 20230522134052, moz:geckodriverVersion: 0.29.1, moz:headless: false, moz:platformVersion: 10.0, moz:processID: 13196, moz:profile: C:\Users\MRMUDA~1\AppData\L..., moz:shutdownTimeout: 60000, moz:useNonSpecCompliantPointerOrigin: false, moz:webdriverClick: true, moz:windowless: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: fca48f57-f409-4c43-b466-961d045b18f9
*** Element info: {Using=tag name, value=td}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:164)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:601)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:279)
at org.openqa.selenium.remote.RemoteWebElement.findElements(RemoteWebElement.java:195)
at org.openqa.selenium.remote.RemoteWebElement.findElementsByTagName(RemoteWebElement.java:275)
at org.openqa.selenium.By$ByTagName.findElements(By.java:327)
at org.openqa.selenium.remote.RemoteWebElement.findElements(RemoteWebElement.java:171)
at TimeStreamGroup.Reconstream.Administration_ATM.FindATM(Administration_ATM.java:225)
at TimeStreamGroup.Reconstream.Administration_ATM.VerifyThaATMExistInList(Administration_ATM.java:211)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyThaATMExistInList -->
        <test-method is-config="true" signature="testIT(org.testng.ITestResult)[pri:0, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee]" started-at="2023-06-02T08:18:47Z" name="testIT" finished-at="2023-06-02T08:18:47Z" duration-ms="207" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyThaATMExistInList status=FAILURE method=Administration_ATM.VerifyThaATMExistInList()[pri:16, instance:TimeStreamGroup.Reconstream.Administration_ATM@32ee6fee] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[<a href='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyThaATMExistInList_02_06_2023_01_18_47.png'> <img src='C:\Users\MR MUDASSAR\git\My-Project\target\surefire-reports\failure_screenshots\VerifyThaATMExistInList_02_06_2023_01_18_47.png' height='100' width='100'/> </a>]]>
            </line>
          </reporter-output>
        </test-method> <!-- testIT -->
      </class> <!-- TimeStreamGroup.Reconstream.Administration_ATM -->
    </test> <!-- ATM Management -->
  </suite> <!-- ReconStream -->
</testng-results>
